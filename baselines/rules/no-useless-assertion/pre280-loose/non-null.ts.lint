export {};

1!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
(1 + 2)!;
       ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
null!;
    ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
undefined!;
         ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
NaN!;
   ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
Infinity!;
        ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
something!;
         ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

const a = 1;
a!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let b: string | undefined;
b = "b";
b!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
b = undefined;
b!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

const c = !b ? "foo" : undefined;
c!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

const obj = {
    prop: c,
};
obj!.prop!;
   ~        [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
         ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let d: string;
d!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
d = "foo";
d!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let e: string | number;
e!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
e = 1;
e!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

const f = c ? c : null;
f!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
f!!;
 ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

declare let g: string;
g!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let {h} = {h: ''};
h!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let i: string;
i!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
{
    i!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}
function foo(j: string) {
    j!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    i!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}

let k = b || c!; // this line should not be an error in strict mode
              ~                                                     [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
k!; // but this line should
 ~                          [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let l: string | null;

let m: any;
m!;
 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

foobar!;
      ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

declare let possiblyNull: string | null;
declare let possiblyUndefined: string | undefined;
declare let possiblyBoth: string | null | undefined;

function takeAny(arg: any) {}
function takeNull(arg: string | null) {}
function takeUndefined(arg: string | undefined) {}
function takeBoth(arg: string | null | undefined) {}
function takeStringNumberUndefined(arg: string | number | undefined) {}

takeAny(possiblyNull!);
                    ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeAny(possiblyUndefined!);
                         ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeAny(possiblyBoth!);
                    ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeAny(l!);
         ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

takeNull(possiblyNull!);
                     ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeNull(possiblyUndefined!);
                          ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeNull(possiblyBoth!);
                     ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeNull(l!);
          ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

takeUndefined(possiblyNull!);
                          ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeUndefined(possiblyUndefined!);
                               ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeUndefined(possiblyBoth!);
                          ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

takeBoth(possiblyNull!);
                     ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeBoth(possiblyUndefined!);
                          ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeBoth(possiblyBoth!);
                     ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

takeStringNumberUndefined(possiblyNull!);
                                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeStringNumberUndefined(possiblyUndefined!);
                                           ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeStringNumberUndefined(possiblyBoth!);
                                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

declare let functionOrAny: (() => void) | undefined;
functionOrAny!();
             ~    [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

function fn<T extends string | undefined, U extends string, V>(one: T, two: U, three: V) {
    one!;
       ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    two!;
       ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    fn(one!, two!);
          ~         [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
                ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    foo(one!);
           ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    fn(two!, one!);
          ~         [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
                ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    foo(three!);
             ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeUndefined(one!);
                     ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    let uninitialized: T;
    uninitialized!;
                 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    let uninitialized2: U;
    uninitialized2!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    let uninitialized3: V;
    uninitialized3!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    let uninitialized4: T | undefined;
    uninitialized4!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    let uninitialized5: U | undefined;
    uninitialized5!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    foo(uninitialized5!);
                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeUndefined(uninitialized5!);
                                ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}

interface I {
    foo?: string;
    bar?: string;
}

function fn1<T extends I>(o: T, k: keyof I) {
    foo(o[k]!);
            ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeUndefined(o[k]!);
                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}

function fn2<T extends I, K extends keyof T>(o: T, k: K) {
    foo(o[k]!); // TODO https://github.com/Microsoft/TypeScript/issues/12991
            ~                                                                [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeUndefined(o[k]!);
                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}

function fn3<K extends keyof I>(o: I, k: K) {
    foo(o[k]!);
            ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeUndefined(o[k]!);
                      ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}
