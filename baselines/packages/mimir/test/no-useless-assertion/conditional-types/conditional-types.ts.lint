export {};

type Nullable<T> = T extends null | undefined ? T : T | null | undefined;
type NonNullable<T> = T extends null | undefined ? never : T;

declare function nullable<T>(param: T): Nullable<T>;
declare function nonNullable<T>(param: T): NonNullable<T>;

declare function takeString(param: string): void;
declare function takeNullable(param: Nullable<string>): void;

declare let v: Nullable<string>;
declare let s: NonNullable<typeof v>;

takeString(v!);
takeNullable(v!);
              ~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts 'null' and 'undefined' values.]
takeString(s!);
            ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeNullable(s!);
              ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
takeNullable(nullable(s)!);
                        ~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts 'null' and 'undefined' values.]
takeString(nonNullable(v)!);
                         ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

nullable(s)!;
nonNullable(s)!;
              ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
nullable(null)!;
nonNullable(null)!;
                 ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

nullable(s) as string;
nullable(s) as string | null | undefined;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
nonNullable(s) as string;
               ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

v as NonNullable<typeof s>;
s as Nullable<string>;
s as NonNullable<string>;
  ~~~~~~~~~~~~~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
(Boolean() ? s : null) as NonNullable<string>;

function test<T extends string | undefined>(a: T, b: NonNullable<T>, c: T extends number ? never : undefined) {
    a!;
    b!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    nullable(a)!;
    nonNullable(a)!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeString(b!);
                ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    b as string;
      ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    c as never;
}

function test2<T extends string>(a: T, b: NonNullable<T>) {
    a!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    b!;
     ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    nullable(a)!;
    nonNullable(a)!;
                  ~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeString(b!);
                ~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    b as string;
      ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
}
