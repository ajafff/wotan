<1>1;
<number>1;
<number>(1 + 1);
~~~~~~~~         [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let a: string = "foo";
a as typeof a;
  ~~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
<string><string>a as string as string as string;
~~~~~~~~                                         [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
        ~~~~~~~~                                 [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
                  ~~~~~~~~~                      [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
                            ~~~~~~~~~            [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
                                      ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
a as {} as number;
a as any;

declare let arr: Array<string | undefined>;
arr.indexOf(<string>a);
            ~~~~~~~~    [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let b = a ? a : undefined;
b as string;
b! as string;
   ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
arr.indexOf(<string>b);
            ~~~~~~~~    [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
arr.indexOf(b as string);
              ~~~~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]


"".trim() as string;
          ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let c = !!b;
c as boolean;
  ~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

interface I {
    prop: string;
    method(): number;
}

declare let d: I;
d as I;
  ~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
d.method() as number;
           ~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

let e = "foo" as 'foo';
e as typeof e;

['a', 'b', 'c'].map((element, i) => [i, element] as [number, string]);
let f: Array<[number, string]> = ['a', 'b', 'c'].map((element, i) => [i, element] as [number, string]);

declare const g: '1.0';
g as string === '2.0';
declare let h: Array<'a' | 'b' | 'c'>;
(h as string[])[0] === 'z';
declare let i: 'a' | 'b' | 'c';
i as string === 'z';

interface NotATuple {
    0: number,
    0.5: number,
    2: number,
}

interface AlsoNotATuple {}

declare const notATuple: NotATuple;
<NotATuple>notATuple;
~~~~~~~~~~~           [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

declare const alsoNoTuple: AlsoNotATuple;
<AlsoNotATuple>alsoNoTuple;
~~~~~~~~~~~~~~~             [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

<any>unknownName;
~~~~~             [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

function fn<T extends string | undefined>(param: T): T {
    param as string;
    param as string | undefined;
          ~~~~~~~~~~~~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    param as typeof param;
          ~~~~~~~~~~~~~~~  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    b as T;
    b = param;
    param = b as T;

    function takeStringUndefined(p: string | undefined) {}

    // better not add an error when calling `fn` as the assertion is used to infer T
    fn(a as string | undefined);
         ~~~~~~~~~~~~~~~~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
    fn(b);
    fn(b as string);
    fn(param);
    fn(param as string);

    // it's safe to show errors here
    takeStringUndefined(a as string | undefined);
                          ~~~~~~~~~~~~~~~~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
    takeStringUndefined(b);
    takeStringUndefined(b as T);
                          ~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
    takeStringUndefined(param);
    takeStringUndefined(param as T);
                              ~~~~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeStringUndefined(param as string | undefined);
                              ~~~~~~~~~~~~~~~~~~~~~   [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
    takeStringUndefined(b as string);
                          ~~~~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]

    return param;
}

function fn2<T>(param: T) {
    fn(param as any);
             ~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
}

function fn3<T>(param: T) {
    fn2(param as any);
              ~~~~~~   [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]
}

function fn4<T>(cb: (param: T) => void) {
    return function <T>(v: T) {
        cb(v as any);
    }
}

function typeArg<T extends string | undefined>(a: T, b: (param: T) => void) {
    b(a);
}

typeArg(a as string | undefined, (b) => b);
          ~~~~~~~~~~~~~~~~~~~~~             [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]

`${a as string | undefined}`;

declare function tag(strings: TemplateStringsArray, ...values: any[]): string;
tag`${a as string | undefined}`;
        ~~~~~~~~~~~~~~~~~~~~~    [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]

declare function genericTag<T>(strings: TemplateStringsArray, ...values: T[]): T;
genericTag`${a as string | undefined}`;
               ~~~~~~~~~~~~~~~~~~~~~    [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]

declare function genericTag2<T extends string | undefined>(strings: TemplateStringsArray, ...values: T[]): T;
genericTag2`${a as string | undefined}`;
                ~~~~~~~~~~~~~~~~~~~~~    [error no-useless-assertion: This assertion is unnecessary as the receiver accepts the original type of the expression.]

namespace A {
    export class MyClass {
        public prop = '';
    }
}

namespace B {
    export class MyClass {
        public prop = '';
        public prop2 = '';
    }
}

declare let myObj: A.MyClass;
<B.MyClass>myObj;

<number>{prop: 1}.prop;
~~~~~~~~                [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
<number>class {static prop: number}.prop;
~~~~~~~~                                  [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
<number>function() { return 1; }();
~~~~~~~~                            [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

export default <number>class{static prop: number}.prop;
               ~~~~~~~~                                 [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
export default <number>{prop: 1}.prop;
               ~~~~~~~~                [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
export = <number>class{static prop: number}.prop;
         ~~~~~~~~                                 [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]

fn2<1>(1 as const);
fn2<''>(<const>'');

<const>{a: 1 as 1, b: true as false};
             ~~~~                     [error no-useless-assertion: This assertion is unnecesary as it doesn't change the type of the expression.]
