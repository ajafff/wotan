export {};

declare function get<T>(): T;

'foo' as 'foo';
'foo' as 'boo';
~~~~~~~~~~~~~~  [error no-invalid-assertion: Type '"foo"' cannot be converted to type '"boo"'.]
'foo' as any;
'1' as 1;
1 as 1;
1 as 2;
~~~~~~  [error no-invalid-assertion: Type '1' cannot be converted to type '2'.]
true as false;
~~~~~~~~~~~~~  [error no-invalid-assertion: Type 'true' cannot be converted to type 'false'.]
<true>false;
~~~~~~~~~~~  [error no-invalid-assertion: Type 'false' cannot be converted to type 'true'.]

get<boolean>() as true;
get<string>() as 'foo';
get<number>() as 1;

1 as number;
true as boolean;
<string>'foo';

get<any>() as 'foo';
get<never>() as 'foo';

function test<T extends 'foo'>(param: T) {
    param as 'bar';
    param as 'foo';
    1 as T;
    'foo' as T;
    'bar' as T;
    ~~~~~~~~~~  [error no-invalid-assertion: Type '"bar"' cannot be converted to type '"foo"'.]
}
