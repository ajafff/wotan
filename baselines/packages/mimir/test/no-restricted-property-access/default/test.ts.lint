class Private {
    private prop = 1;
    other = this['prop'];

    method() {
        this['prop'];
    }

    static fn(a: Private) {
        a['prop'];
    }
}
function testPrivate(this: Private) {
    new Private()['prop'];
    ~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is private and only accessible within class 'Private'.]
}
class DerivedPrivate extends Private {
    p2 = this['prop'];
         ~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is private and only accessible within class 'Private'.]
}

new Private()['prop'];
~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is private and only accessible within class 'Private'.]

class Protected {
    protected prop = 1;
    other = this['prop'];

    method(other: OtherProtected) {
        this['prop'];
        other['prop'];
        ~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is protected and only accessible within class 'OtherProtected' and its subclasses.]
    }

    static fn(a: Private) {
        a['prop'];
        ~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is private and only accessible within class 'Private'.]
    }
}
function testProtected(this: Protected) {
    new Protected()['prop'];
    enum E {
        bar = new Protected()['prop'],
              ~~~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is protected and only accessible within class 'Protected' and its subclasses.]
    }
    @decorator(new Protected()['prop'])
    class Inner {
        bar = new Protected()['prop'];
              ~~~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is protected and only accessible within class 'Protected' and its subclasses.]
    }

}
new Protected()['prop'];
~~~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is protected and only accessible within class 'Protected' and its subclasses.]

class DerivedProtected extends Protected {
    p2 = this['prop'];
}
function testDerivedProtected(this: DerivedProtected) {
    new DerivedProtected()['prop'];
    new Protected()['prop'];
}

class Unrelated {}
function testUnrelated(this: Unrelated) {
    new Protected()['prop'];
    ~~~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' is protected and only accessible within class 'Protected' and its subclasses.]
}

new class {
~~~~~~~~~~~
    private foo = 1;
~~~~~~~~~~~~~~~~~~~~
}()['foo'];
~~~~~~~~~~  [error no-restricted-property-access: Property 'foo' is private and only accessible within class '(Anonymous class)'.]

const Foo = class {
    private foo = 1;
}
new Foo()['foo'];
~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'foo' is private and only accessible within class 'Foo'.]

class OtherProtected extends Protected {
    protected prop = 1;
}

abstract class Abstract {
    abstract prop: number;
    abstract getProp(): number;
    other = this['prop'] + this['getProp']();
            ~~~~~~~~~~~~                      [error no-restricted-property-access: Abstract property 'prop' in class 'Abstract' cannot be accessed during class initialization.]
    yetAnother = decorator(this['prop']);
                           ~~~~~~~~~~~~   [error no-restricted-property-access: Abstract property 'prop' in class 'Abstract' cannot be accessed during class initialization.]
    constructor(other: Abstract) {
        this['prop'];
        ~~~~~~~~~~~~  [error no-restricted-property-access: Abstract property 'prop' in class 'Abstract' cannot be accessed during class initialization.]
        this['getProp']();
        other['prop'];
        () => this['prop'];
    }
    method() {
        this['prop'];
    }
    fn = () => this['prop'];
}
class DerivedAbstract extends Abstract {
    prop = 1;
    other = this['prop'] + this['getProp']() + super['getProp']() + super['prop'];
                                               ~~~~~~~~~~~~~~~~                    [error no-restricted-property-access: Abstract method 'getProp' in class 'Abstract' cannot be accessed via the 'super' keyword.]
                                                                    ~~~~~~~~~~~~~  [error no-restricted-property-access: Only public and protected methods of the base class are accessible via the 'super' keyword.]
    constructor(other: Abstract) {
        super(other);
        other['prop'];
        this['prop'];
        this['getProp']();
        super['getProp']();
        ~~~~~~~~~~~~~~~~    [error no-restricted-property-access: Abstract method 'getProp' in class 'Abstract' cannot be accessed via the 'super' keyword.]
        super['prop'];
        ~~~~~~~~~~~~~  [error no-restricted-property-access: Only public and protected methods of the base class are accessible via the 'super' keyword.]
    }

    getProp() {
        return this['prop'];
    }
    m() {
        return new class extends DerivedAbstract {
            other = super['getProp']() + super['prop'];
                                         ~~~~~~~~~~~~~  [error no-restricted-property-access: Only public and protected methods of the base class are accessible via the 'super' keyword.]
        }(this);
    }
}

abstract class DerivedAbstractAbstract extends Abstract {
    other = this['prop'] + this['getProp']() + super['getProp']();
            ~~~~~~~~~~~~                                           [error no-restricted-property-access: Abstract property 'prop' in class 'DerivedAbstractAbstract' cannot be accessed during class initialization.]
                                               ~~~~~~~~~~~~~~~~    [error no-restricted-property-access: Abstract method 'getProp' in class 'Abstract' cannot be accessed via the 'super' keyword.]

    constructor(other: Abstract) {
        super(other);
    }
}

abstract class EvenMoreDerivedAbstract extends DerivedAbstractAbstract {
    other = super['getProp']();
            ~~~~~~~~~~~~~~~~    [error no-restricted-property-access: Abstract method 'getProp' in class 'Abstract' cannot be accessed via the 'super' keyword.]
}

declare let privateProtected: Private & Protected;
privateProtected['prop'];
~~~~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' has conflicting declarations and is inaccessible in type 'Private & Protected'.]

class Public {
    prop = 1;
}

declare let publicPrivate: Public & Private;
publicPrivate['prop'];
~~~~~~~~~~~~~~~~~~~~~  [error no-restricted-property-access: Property 'prop' has conflicting declarations and is inaccessible in type 'Public & Private'.]

declare function decorator(...args: any[]): any;
